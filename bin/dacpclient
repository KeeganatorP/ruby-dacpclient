#!/usr/bin/env ruby
require 'dacpclient'
require 'English'
require 'socket'
require 'yaml'
require 'fileutils'
require 'io/console'

# This is the CLI DACP Client. Normally installed as `dacpclient`
class CLIClient
  def initialize
    @config = {}
    @config['client_name'] ||= "DACPClient (#{Socket.gethostname})"
    @config['host'] ||= 'localhost'
    load_config

    @client = DACPClient::Client.new(@config['client_name'], @config['host'], 3689)
    if @config['guid'].nil? || @config['guid'] !~ /^[A-F0-9]{16}$/
      @config['guid'] = @client.guid
      save_config
    end
    @client.guid = @config['guid']
    @login = false
  end

  def parse_arguments(arguments)
    if arguments.length > 0 && !([:parse_arguments].include?(arguments.first.to_sym)) && self.class.instance_methods(false).include?(arguments.first.to_sym)
      method = arguments.first.to_sym
      send method
      status unless [:help, :usage, :status, :status_ticker].include?(method)
    else
      usage
    end
  end

  def status
    login
    status = @client.status
    if status.caps == 2
      puts '[STOPPED]'
    else
      name = status.cann
      artist = status.cana
      album = status.canl
      playstatus = status.caps != 4 ? '❙❙' : '▶ '
      remaining = status.cant
      total = status.cast
      current = total - remaining
      puts "[#{format_time(current)}/#{format_time(total)}] #{playstatus} #{name} - #{artist} (#{album})"
    end
  end

  def status_ticker
    login
    status = nil
    status_time = 0
    repeat_every(1) do
      unless status.nil?
        if status.caps == 2
          print "\r\033[K[STOPPED]"
        else
          name = status.cann
          artist = status.cana
          album = status.canl
          playstatus = status.caps != 4 ? '❙❙' : '▶ '
          total = status.cast
          remaining = status.cant
          current = total - remaining + [((Time.now.to_f * 1000.0) - status_time), 0].max
          print "\r\033[K[#{format_time(current)}/#{format_time(total)}] #{playstatus} #{name} - #{artist} (#{album})"
        end
      end
    end
    loop do
      status = @client.status true
      status_time = Time.now.to_f * 1000.0
    end
  end

  def home_sharing
    puts "Setting up Home Sharing. Saving Home Sharing GUID to ~/.dacpclient/config.yml"
    puts "\nPlease enter your Apple ID credentials:"
    print "Apple ID (e-mail address): "
    email = $stdin.gets.strip
    print "Password: "
    password = $stdin.noecho(&:gets).chomp
    guid = @client.setup_home_sharing(email, password)
    password = nil
    @config['appleid'] = email
    @config['hsgid'] = guid
    save_config
    puts "\n\n"
    puts "Got your Home Sharing GUID (#{guid}). Logging in.."
    login
  end
  
  def hostname
    puts "Please enter a new hostname to connect to:"
    @config['host'] = $stdin.gets.strip
    save_config
    status
  end

  def play
    login
    @client.play
  end

  def pause
    login
    @client.pause
  end

  def playpause
    login
    @client.playpause
  end

  def next
    login
    @client.next
  end

  def prev
    login
    @client.prev
  end

  def databases
    login
    puts @client.databases
  end

  def playqueue
    login
    puts @client.list_queue
  end

  def upnext
    login
    items = @client.list_queue.mlcl.to_a.select {|i| i.type.tag == 'mlit' }
    puts 'Up next:'
    puts '--------'
    puts
    items.each do |item|
      name = item.ceQn
      artist = item.ceQr
      album = item.ceQa
      puts "#{name} - #{artist} (#{album})"
    end
    puts
  end

  def stop
    login
    @client.stop
  end

  def debug
    login
    require 'pry'
    binding.pry
  end

  def usage
    puts "Usage: #{$PROGRAM_NAME} [command]"
    puts "(c) #{Time.now.year} Jurriaan Pruis <email@jurriaanpruis.nl>"
    puts
    puts 'Where command is one of the following:'

    puts CLIClient.instance_methods(false).reject { |m| [:parse_arguments].include?(m)  }
  end

  alias_method :previous, :prev
  alias_method :help, :usage

  private

  def login
    return if @login
    @client.hsgid = @config['hsgid']
    if @client.hsgid.nil?
      @client.pair_and_login
    else
      @client.login
    end
    @login = true
  end

  def format_time(millis)
    seconds, millis = millis.divmod(1000)
    minutes, seconds = seconds.divmod(60)
    hours, minutes = minutes.divmod(60)
    if hours == 0
      sprintf('%02d:%02d', minutes, seconds)
    else
      sprintf('%02d:%02d:%02d', hours, minutes, seconds)
    end
  end

  def repeat_every(interval)
    Thread.new do
      loop do
        start_time = Time.now
        yield
        elapsed = Time.now - start_time
        sleep([interval - elapsed, 0].max)
      end
    end
  end

  def config_dir
    File.join(ENV['HOME'], '.dacpclient')
  end

  def load_config
    FileUtils.mkdir_p(config_dir)
    config_file = File.join(config_dir,'config.yml')
    if File.exists? config_file
      @config.merge! YAML.load_file(config_file)
    else
      save_config
    end
  end

  def save_config
    File.open(File.join(config_dir,'config.yml'), 'w') do |out|
      YAML.dump(@config, out)
    end
  end
end

cli = CLIClient.new
cli.parse_arguments(Array(ARGV))
