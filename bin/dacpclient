#!/usr/bin/env ruby
$LOAD_PATH.unshift(File.join(__dir__, '../lib/'))
require 'dacpclient'
require 'English'
require 'socket'
require 'yaml'
require 'fileutils'
require 'io/console'
require 'thor'

# This is the CLI DACP Client. Normally installed as `dacpclient`
class CLIClient < Thor
  package_name :dacpclient
  include Thor::Actions
  def initialize(*)
    @config = {}
    @config['client_name'] ||= "DACPClient (#{Socket.gethostname})"
    @config['host'] ||= 'localhost'
    @config['known_databases'] ||= ['']

    load_config

    if @config['guid'].nil? || @config['guid'] !~ /^[A-F0-9]{16}$/
      guid = Digest::SHA2.hexdigest(@config['client_name'])[0..15].upcase
      @config['guid'] = guid
      save_config
    end

    browser = DACPClient::Browser.new
    browser.browse(false)
    database = browser.devices.find do |device|
      @config['known_databases'].include? device.database_id
    end

    unless database
      pin = 4.times.map { Random.rand(10) } if pin.nil?
      puts 'Cannot find paired Libraries, waiting for a pair request..'
      puts "Pincode: #{pin}"
      pairserver = DACPClient::PairingServer.new(@config['client_name'],
                                                 @config['guid'])
      pairserver.pin = pin
      database = pairserver.start
      @config['known_databases'] << database.database_id
      save_config
    end
    @client = DACPClient::Client.new(@config['client_name'], database.host,
                                     database.port)
    @client.guid = @config['guid']
    @login = false

    super
  end

  desc :status, 'Shows the status of the DACP server'
  method_options ticker: :boolean
  def status
    login
    return status_ticker if options[:ticker]
    show_status
  end

  desc :home_sharing, 'Setup Home Sharing (Not fully functional)'
  def home_sharing
    puts 'Setting up Home Sharing. Saving Home Sharing GUID to ' + config_file
    puts "\nPlease enter your Apple ID credentials:"
    email = ask('Apple ID (e-mail address):').strip
    password = ask('Password:')
    guid = @client.setup_home_sharing(email, password)
    @config['appleid'] = email
    @config['hsgid'] = guid
    save_config
    puts "\n\n"
    puts "Got your Home Sharing GUID (#{guid}). Logging in.."
    login
  end

  desc :hostname, 'Set the hostname'
  def hostname
    @config['host'] = ask('Please enter a new hostname to connect to:').strip
    save_config
    @client = DACPClient::Client.new(@config['client_name'], @config['host'],
                                     3689)
    status
  end

  desc :play, 'Start playing'
  def play
    login
    @client.play
  end

  desc :pause, 'Pause Playing'
  def pause
    login
    @client.pause
  end

  desc :playpause, 'Toggle Playing'
  def playpause
    login
    @client.playpause
  end

  desc :next, 'Go to next item'
  def next
    login
    @client.next
  end

  desc :prev, 'Go to previous item'
  map previous: :prev
  def prev
    login
    @client.prev
  end

  desc :playlists, 'Show the playlists'
  def playlists
    login
    playlist_items = @client.playlists
    puts 'Playlists:'
    puts '----------'
    playlist_items.each do |playlist|
      print '  ' unless playlist.base_playlist?
      puts "#{playlist.name} (#{playlist.count})"
    end
    puts
  end

  desc :upnext, 'Show what\'s up next'
  def upnext
    login
    items = @client.list_queue.items
    puts 'Up next:'
    puts '--------'
    puts
    items.each do |item|
      title = item.title
      artist = item.artist
      album = item.album
      puts "#{title} - #{artist} (#{album}) [#{format_time(item.song_time)}]"
    end
    puts
  end

  desc :stop, 'Stop playing'
  def stop
    login
    @client.stop
  end

  # rubocop:disable Debugger
  desc :debug, 'Debuggin\''
  def debug
    login
    begin
      require 'pry'
      binding.pry
    rescue
      puts 'Please install PRY to be able to debug things.'
    end
  end
  # rubocop:enable Debugger

  desc :version, 'Show DACPClient Version'
  def version
    puts "DACPClient v#{DACPClient::VERSION}"
    puts "using DMAPParser v#{DMAPParser::VERSION}"
    print "DACPClient and DMAPParser are Copyright (c) "
    puts "#{Time.now.year} Jurriaan Pruis"
  end

  private

  def show_status(status = @client.status, start_time = nil)
    name = status.title
    artist = status.artist
    album = status.album
    playstatus = status.playing? ? '▶ ' : '❙❙'
    current = 0
    total = 0
    extra_time = 0
    extra_time = Time.now.to_f * 1000.0 - start_time if start_time
    if status.song_length? && status.song_remaining_time?
      total = status.song_length
      current = status.song_position + extra_time
    end
    print "[#{format_time(current)}/#{format_time(total)}]"
    puts " #{playstatus} #{name} - #{artist} (#{album})"
  end

  def status_ticker
    status = nil
    start_time = nil
    repeat_every(1) do
      unless status.nil?
        if status.stopped?
          print "\r\033[K[STOPPED]"
        else
          show_status(status, start_time)
        end
      end
    end
    loop do
      status = @client.status true
      start_time = Time.now.to_f * 1000.0
    end
  end

  def login
    return if @login
    @client.hsgid = @config['hsgid']
    if @client.hsgid.nil?
      @client.pair_and_login
    else
      @client.login
    end
    @login = true
    if @client.host != @config['host']
      @config['host'] = @client.host
      save_config
    end
  end

  def format_time(millis)
    seconds, _ = millis.divmod(1000)
    minutes, seconds = seconds.divmod(60)
    hours, minutes = minutes.divmod(60)
    if hours == 0
      sprintf('%02d:%02d', minutes, seconds)
    else
      sprintf('%02d:%02d:%02d', hours, minutes, seconds)
    end
  end

  def repeat_every(interval)
    Thread.new do
      loop do
        start_time = Time.now
        yield
        elapsed = Time.now - start_time
        sleep([interval - elapsed, 0].max)
      end
    end
  end

  def config_dir
    File.join(ENV['HOME'], '.dacpclient')
  end

  def config_file
    File.join(config_dir, 'config.yml')
  end

  def load_config
    FileUtils.mkdir_p(config_dir)
    if File.exist? config_file
      data = YAML.load_file(config_file)
      @config.merge!(data) if data.is_a?(Hash)
    else
      save_config
    end
  end

  def save_config
    File.open(File.join(config_dir, 'config.yml'), 'w') do |out|
      YAML.dump(@config, out)
    end
  end
end

CLIClient.start
